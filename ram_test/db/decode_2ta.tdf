--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone III" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 9.1 cbx_cycloneii 2009:10:21:21:22:16:SJ cbx_lpm_add_sub 2009:10:21:21:22:16:SJ cbx_lpm_compare 2009:10:21:21:22:16:SJ cbx_lpm_decode 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ cbx_stratix 2009:10:21:21:22:16:SJ cbx_stratixii 2009:10:21:21:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_2ta
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3815w[1..0]	: WIRE;
	w_anode3824w[3..0]	: WIRE;
	w_anode3841w[3..0]	: WIRE;
	w_anode3851w[3..0]	: WIRE;
	w_anode3861w[3..0]	: WIRE;
	w_anode3871w[3..0]	: WIRE;
	w_anode3881w[3..0]	: WIRE;
	w_anode3891w[3..0]	: WIRE;
	w_anode3901w[3..0]	: WIRE;
	w_anode3913w[1..0]	: WIRE;
	w_anode3920w[3..0]	: WIRE;
	w_anode3931w[3..0]	: WIRE;
	w_anode3941w[3..0]	: WIRE;
	w_anode3951w[3..0]	: WIRE;
	w_anode3961w[3..0]	: WIRE;
	w_anode3971w[3..0]	: WIRE;
	w_anode3981w[3..0]	: WIRE;
	w_anode3991w[3..0]	: WIRE;
	w_data3813w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode3991w[3..3], w_anode3981w[3..3], w_anode3971w[3..3], w_anode3961w[3..3], w_anode3951w[3..3], w_anode3941w[3..3], w_anode3931w[3..3], w_anode3920w[3..3]), ( w_anode3901w[3..3], w_anode3891w[3..3], w_anode3881w[3..3], w_anode3871w[3..3], w_anode3861w[3..3], w_anode3851w[3..3], w_anode3841w[3..3], w_anode3824w[3..3]));
	w_anode3815w[] = ( (w_anode3815w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3824w[] = ( (w_anode3824w[2..2] & (! w_data3813w[2..2])), (w_anode3824w[1..1] & (! w_data3813w[1..1])), (w_anode3824w[0..0] & (! w_data3813w[0..0])), w_anode3815w[1..1]);
	w_anode3841w[] = ( (w_anode3841w[2..2] & (! w_data3813w[2..2])), (w_anode3841w[1..1] & (! w_data3813w[1..1])), (w_anode3841w[0..0] & w_data3813w[0..0]), w_anode3815w[1..1]);
	w_anode3851w[] = ( (w_anode3851w[2..2] & (! w_data3813w[2..2])), (w_anode3851w[1..1] & w_data3813w[1..1]), (w_anode3851w[0..0] & (! w_data3813w[0..0])), w_anode3815w[1..1]);
	w_anode3861w[] = ( (w_anode3861w[2..2] & (! w_data3813w[2..2])), (w_anode3861w[1..1] & w_data3813w[1..1]), (w_anode3861w[0..0] & w_data3813w[0..0]), w_anode3815w[1..1]);
	w_anode3871w[] = ( (w_anode3871w[2..2] & w_data3813w[2..2]), (w_anode3871w[1..1] & (! w_data3813w[1..1])), (w_anode3871w[0..0] & (! w_data3813w[0..0])), w_anode3815w[1..1]);
	w_anode3881w[] = ( (w_anode3881w[2..2] & w_data3813w[2..2]), (w_anode3881w[1..1] & (! w_data3813w[1..1])), (w_anode3881w[0..0] & w_data3813w[0..0]), w_anode3815w[1..1]);
	w_anode3891w[] = ( (w_anode3891w[2..2] & w_data3813w[2..2]), (w_anode3891w[1..1] & w_data3813w[1..1]), (w_anode3891w[0..0] & (! w_data3813w[0..0])), w_anode3815w[1..1]);
	w_anode3901w[] = ( (w_anode3901w[2..2] & w_data3813w[2..2]), (w_anode3901w[1..1] & w_data3813w[1..1]), (w_anode3901w[0..0] & w_data3813w[0..0]), w_anode3815w[1..1]);
	w_anode3913w[] = ( (w_anode3913w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3920w[] = ( (w_anode3920w[2..2] & (! w_data3813w[2..2])), (w_anode3920w[1..1] & (! w_data3813w[1..1])), (w_anode3920w[0..0] & (! w_data3813w[0..0])), w_anode3913w[1..1]);
	w_anode3931w[] = ( (w_anode3931w[2..2] & (! w_data3813w[2..2])), (w_anode3931w[1..1] & (! w_data3813w[1..1])), (w_anode3931w[0..0] & w_data3813w[0..0]), w_anode3913w[1..1]);
	w_anode3941w[] = ( (w_anode3941w[2..2] & (! w_data3813w[2..2])), (w_anode3941w[1..1] & w_data3813w[1..1]), (w_anode3941w[0..0] & (! w_data3813w[0..0])), w_anode3913w[1..1]);
	w_anode3951w[] = ( (w_anode3951w[2..2] & (! w_data3813w[2..2])), (w_anode3951w[1..1] & w_data3813w[1..1]), (w_anode3951w[0..0] & w_data3813w[0..0]), w_anode3913w[1..1]);
	w_anode3961w[] = ( (w_anode3961w[2..2] & w_data3813w[2..2]), (w_anode3961w[1..1] & (! w_data3813w[1..1])), (w_anode3961w[0..0] & (! w_data3813w[0..0])), w_anode3913w[1..1]);
	w_anode3971w[] = ( (w_anode3971w[2..2] & w_data3813w[2..2]), (w_anode3971w[1..1] & (! w_data3813w[1..1])), (w_anode3971w[0..0] & w_data3813w[0..0]), w_anode3913w[1..1]);
	w_anode3981w[] = ( (w_anode3981w[2..2] & w_data3813w[2..2]), (w_anode3981w[1..1] & w_data3813w[1..1]), (w_anode3981w[0..0] & (! w_data3813w[0..0])), w_anode3913w[1..1]);
	w_anode3991w[] = ( (w_anode3991w[2..2] & w_data3813w[2..2]), (w_anode3991w[1..1] & w_data3813w[1..1]), (w_anode3991w[0..0] & w_data3813w[0..0]), w_anode3913w[1..1]);
	w_data3813w[2..0] = data_wire[2..0];
END;
--VALID FILE
